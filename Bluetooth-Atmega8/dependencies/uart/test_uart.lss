
test_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800078  00800078  00000386  2**0
                  ALLOC
  3 .stab         00000204  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000f4  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000691  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a8b  00000000  00000000  000006d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006ec  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000014d  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000124  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003e0  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000344  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3e c0       	rjmp	.+124    	; 0x7e <__ctors_end>
   2:	58 c0       	rjmp	.+176    	; 0xb4 <__bad_interrupt>
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	56 c0       	rjmp	.+172    	; 0xb4 <__bad_interrupt>
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	54 c0       	rjmp	.+168    	; 0xb4 <__bad_interrupt>
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	52 c0       	rjmp	.+164    	; 0xb4 <__bad_interrupt>
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	50 c0       	rjmp	.+160    	; 0xb4 <__bad_interrupt>
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	4f c0       	rjmp	.+158    	; 0xb6 <__vector_11>
  18:	7a c0       	rjmp	.+244    	; 0x10e <__vector_12>
  1a:	4c c0       	rjmp	.+152    	; 0xb4 <__bad_interrupt>
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	4a c0       	rjmp	.+148    	; 0xb4 <__bad_interrupt>
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	48 c0       	rjmp	.+144    	; 0xb4 <__bad_interrupt>
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	42 75       	andi	r20, 0x52	; 82
  28:	66 66       	ori	r22, 0x66	; 102
  2a:	65 72       	andi	r22, 0x25	; 37
  2c:	20 6f       	ori	r18, 0xF0	; 240
  2e:	76 65       	ori	r23, 0x56	; 86
  30:	72 66       	ori	r23, 0x62	; 98
  32:	6c 6f       	ori	r22, 0xFC	; 252
  34:	77 20       	and	r7, r7
  36:	65 72       	andi	r22, 0x25	; 37
  38:	72 6f       	ori	r23, 0xF2	; 242
  3a:	72 3a       	cpi	r23, 0xA2	; 162
  3c:	20 00       	.word	0x0020	; ????

0000003e <_ZZ4mainE3__c_1>:
  3e:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  4e:	6f 72 3a 20 00                                      or: .

00000053 <_ZZ4mainE3__c_0>:
  53:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  63:	3a 20 00                                            : .

00000066 <_ZZ4mainE3__c>:
  66:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
  76:	20 46 4c 41 53 48 0a 00                              FLASH..

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf e5       	ldi	r28, 0x5F	; 95
  84:	d4 e0       	ldi	r29, 0x04	; 4
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
  8a:	10 e0       	ldi	r17, 0x00	; 0
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	ea ed       	ldi	r30, 0xDA	; 218
  92:	f2 e0       	ldi	r31, 0x02	; 2
  94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
  96:	05 90       	lpm	r0, Z+
  98:	0d 92       	st	X+, r0
  9a:	a8 37       	cpi	r26, 0x78	; 120
  9c:	b1 07       	cpc	r27, r17
  9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a8 e7       	ldi	r26, 0x78	; 120
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	ad 3b       	cpi	r26, 0xBD	; 189
  ac:	b1 07       	cpc	r27, r17
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	aa d0       	rcall	.+340    	; 0x206 <main>
  b2:	11 c1       	rjmp	.+546    	; 0x2d6 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  ca:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
  cc:	9c b1       	in	r25, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  ce:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  d0:	e0 91 7a 00 	lds	r30, 0x007A
  d4:	ef 5f       	subi	r30, 0xFF	; 255
  d6:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  d8:	20 91 79 00 	lds	r18, 0x0079
  dc:	e2 17       	cp	r30, r18
  de:	39 f0       	breq	.+14     	; 0xee <__vector_11+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  e0:	e0 93 7a 00 	sts	0x007A, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	e3 58       	subi	r30, 0x83	; 131
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	90 83       	st	Z, r25
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <__vector_11+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  ee:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
  f0:	90 91 78 00 	lds	r25, 0x0078
  f4:	89 2b       	or	r24, r25
  f6:	80 93 78 00 	sts	0x0078, r24
}
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 120:	90 91 7c 00 	lds	r25, 0x007C
 124:	80 91 7b 00 	lds	r24, 0x007B
 128:	98 17       	cp	r25, r24
 12a:	61 f0       	breq	.+24     	; 0x144 <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 12c:	e0 91 7b 00 	lds	r30, 0x007B
 130:	ef 5f       	subi	r30, 0xFF	; 255
 132:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 134:	e0 93 7b 00 	sts	0x007B, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	e3 56       	subi	r30, 0x63	; 99
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	80 81       	ld	r24, Z
 140:	8c b9       	out	0x0c, r24	; 12
 142:	01 c0       	rjmp	.+2      	; 0x146 <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 144:	55 98       	cbi	0x0a, 5	; 10
    }
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 158:	10 92 7c 00 	sts	0x007C, r1
    UART_TxTail = 0;
 15c:	10 92 7b 00 	sts	0x007B, r1
    UART_RxHead = 0;
 160:	10 92 7a 00 	sts	0x007A, r1
    UART_RxTail = 0;
 164:	10 92 79 00 	sts	0x0079, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 168:	97 ff       	sbrs	r25, 7
 16a:	03 c0       	rjmp	.+6      	; 0x172 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 16c:	22 e0       	ldi	r18, 0x02	; 2
 16e:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 170:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 172:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 174:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 176:	88 e9       	ldi	r24, 0x98	; 152
 178:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 17a:	86 e8       	ldi	r24, 0x86	; 134
 17c:	80 bd       	out	0x20, r24	; 32
 17e:	08 95       	ret

00000180 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 180:	90 91 7a 00 	lds	r25, 0x007A
 184:	80 91 79 00 	lds	r24, 0x0079
 188:	98 17       	cp	r25, r24
 18a:	81 f0       	breq	.+32     	; 0x1ac <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 18c:	e0 91 79 00 	lds	r30, 0x0079
 190:	ef 5f       	subi	r30, 0xFF	; 255
 192:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 194:	e0 93 79 00 	sts	0x0079, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e3 58       	subi	r30, 0x83	; 131
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
 1a0:	90 91 78 00 	lds	r25, 0x0078
    UART_LastRxError = 0;
 1a4:	10 92 78 00 	sts	0x0078, r1
    return data;
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
 1b0:	08 95       	ret

000001b2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1b2:	90 91 7c 00 	lds	r25, 0x007C
 1b6:	9f 5f       	subi	r25, 0xFF	; 255
 1b8:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 1ba:	20 91 7b 00 	lds	r18, 0x007B
 1be:	92 17       	cp	r25, r18
 1c0:	e1 f3       	breq	.-8      	; 0x1ba <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 1c2:	e9 2f       	mov	r30, r25
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	e3 56       	subi	r30, 0x63	; 99
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 1cc:	90 93 7c 00 	sts	0x007C, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 1d0:	55 9a       	sbi	0x0a, 5	; 10
 1d2:	08 95       	ret

000001d4 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
    while (*s) 
 1da:	89 91       	ld	r24, Y+
 1dc:	88 23       	and	r24, r24
 1de:	11 f0       	breq	.+4      	; 0x1e4 <uart_puts+0x10>
      uart_putc(*s++);
 1e0:	e8 df       	rcall	.-48     	; 0x1b2 <uart_putc>
 1e2:	fb cf       	rjmp	.-10     	; 0x1da <uart_puts+0x6>

}/* uart_puts */
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1f0:	84 91       	lpm	r24, Z
 1f2:	ef 01       	movw	r28, r30
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	88 23       	and	r24, r24
 1f8:	19 f0       	breq	.+6      	; 0x200 <uart_puts_p+0x16>
      uart_putc(c);
 1fa:	db df       	rcall	.-74     	; 0x1b2 <uart_putc>
 1fc:	fe 01       	movw	r30, r28
 1fe:	f8 cf       	rjmp	.-16     	; 0x1f0 <uart_puts_p+0x6>

}/* uart_puts_p */
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <main>:
/* 9600 baud */
#define UART_BAUD_RATE      9600      


int main(void)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	27 97       	sbiw	r28, 0x07	; 7
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 21a:	87 e6       	ldi	r24, 0x67	; 103
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	9c df       	rcall	.-200    	; 0x158 <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 220:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("String stored in SRAM\n");
 222:	80 e6       	ldi	r24, 0x60	; 96
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	d6 df       	rcall	.-84     	; 0x1d4 <uart_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("String stored in FLASH\n");
 228:	86 e6       	ldi	r24, 0x66	; 102
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	de df       	rcall	.-68     	; 0x1ea <uart_puts_p>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 22e:	4a e0       	ldi	r20, 0x0A	; 10
 230:	be 01       	movw	r22, r28
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	86 e8       	ldi	r24, 0x86	; 134
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	1a d0       	rcall	.+52     	; 0x270 <__itoa_ncheck>
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
    uart_puts(buffer);        // and transmit string to UART
 23c:	ce 01       	movw	r24, r28
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	c9 df       	rcall	.-110    	; 0x1d4 <uart_puts>

    
    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
 242:	8d e0       	ldi	r24, 0x0D	; 13
 244:	b6 df       	rcall	.-148    	; 0x1b2 <uart_putc>
         * uart_getc() returns in the lower byte the received character and 
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart_getc();
 246:	9c df       	rcall	.-200    	; 0x180 <uart_getc>
 248:	8c 01       	movw	r16, r24
        if ( c & UART_NO_DATA )
 24a:	90 fd       	sbrc	r25, 0
 24c:	fc cf       	rjmp	.-8      	; 0x246 <main+0x40>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 24e:	94 ff       	sbrs	r25, 4
 250:	03 c0       	rjmp	.+6      	; 0x258 <main+0x52>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 252:	83 e5       	ldi	r24, 0x53	; 83
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	c9 df       	rcall	.-110    	; 0x1ea <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 258:	13 ff       	sbrs	r17, 3
 25a:	03 c0       	rjmp	.+6      	; 0x262 <main+0x5c>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 25c:	8e e3       	ldi	r24, 0x3E	; 62
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	c4 df       	rcall	.-120    	; 0x1ea <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 262:	11 ff       	sbrs	r17, 1
 264:	03 c0       	rjmp	.+6      	; 0x26c <main+0x66>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 266:	86 e2       	ldi	r24, 0x26	; 38
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	bf df       	rcall	.-130    	; 0x1ea <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (unsigned char)c );
 26c:	80 2f       	mov	r24, r16
 26e:	ea cf       	rjmp	.-44     	; 0x244 <main+0x3e>

00000270 <__itoa_ncheck>:
 270:	bb 27       	eor	r27, r27
 272:	4a 30       	cpi	r20, 0x0A	; 10
 274:	31 f4       	brne	.+12     	; 0x282 <__itoa_ncheck+0x12>
 276:	99 23       	and	r25, r25
 278:	22 f4       	brpl	.+8      	; 0x282 <__itoa_ncheck+0x12>
 27a:	bd e2       	ldi	r27, 0x2D	; 45
 27c:	90 95       	com	r25
 27e:	81 95       	neg	r24
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	01 c0       	rjmp	.+2      	; 0x286 <__utoa_common>

00000284 <__utoa_ncheck>:
 284:	bb 27       	eor	r27, r27

00000286 <__utoa_common>:
 286:	fb 01       	movw	r30, r22
 288:	55 27       	eor	r21, r21
 28a:	aa 27       	eor	r26, r26
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	aa 1f       	adc	r26, r26
 292:	a4 17       	cp	r26, r20
 294:	10 f0       	brcs	.+4      	; 0x29a <__utoa_common+0x14>
 296:	a4 1b       	sub	r26, r20
 298:	83 95       	inc	r24
 29a:	50 51       	subi	r21, 0x10	; 16
 29c:	b9 f7       	brne	.-18     	; 0x28c <__utoa_common+0x6>
 29e:	a0 5d       	subi	r26, 0xD0	; 208
 2a0:	aa 33       	cpi	r26, 0x3A	; 58
 2a2:	08 f0       	brcs	.+2      	; 0x2a6 <__utoa_common+0x20>
 2a4:	a9 5d       	subi	r26, 0xD9	; 217
 2a6:	a1 93       	st	Z+, r26
 2a8:	00 97       	sbiw	r24, 0x00	; 0
 2aa:	79 f7       	brne	.-34     	; 0x28a <__utoa_common+0x4>
 2ac:	b1 11       	cpse	r27, r1
 2ae:	b1 93       	st	Z+, r27
 2b0:	11 92       	st	Z+, r1
 2b2:	cb 01       	movw	r24, r22
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <strrev>

000002b6 <strrev>:
 2b6:	dc 01       	movw	r26, r24
 2b8:	fc 01       	movw	r30, r24
 2ba:	67 2f       	mov	r22, r23
 2bc:	71 91       	ld	r23, Z+
 2be:	77 23       	and	r23, r23
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <strrev+0x4>
 2c2:	32 97       	sbiw	r30, 0x02	; 2
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <strrev+0x18>
 2c6:	7c 91       	ld	r23, X
 2c8:	6d 93       	st	X+, r22
 2ca:	70 83       	st	Z, r23
 2cc:	62 91       	ld	r22, -Z
 2ce:	ae 17       	cp	r26, r30
 2d0:	bf 07       	cpc	r27, r31
 2d2:	c8 f3       	brcs	.-14     	; 0x2c6 <strrev+0x10>
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
